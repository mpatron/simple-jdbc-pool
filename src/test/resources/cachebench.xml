<!--
	Configures and controls the behaviour of the cache benchmarking framework.

	sampleSize
    this is the number of putsgets to be performed, an average is used in metrics.
	gcBetweenTestsEnabled
    if true, the framework pauses between each test and requests System.gc()
    use this if you find yourself running out of mem!
	sleepBetweenTests
    ms to sleep between tests.  useful to allow the JVM some time to do a gc
	emptyCacheBetweenTests
    again, use if you're running out of mem.
	numThreads
    the number of executor threads to use to perform the required number of operations.  
-->
<cachebench sampleSize="50000" gcBetweenTestsEnabled="true" sleepBetweenTests="2000"
  emptyCacheBetweenTests="true" useTransactions="false" numThreads="25">

  <testcase name="NonClusteredTest" stopOnFailure="true">
    <!-- org.cachebench.warmup.PutGetCacheWarmup warms up the cache by doing operation on it;
         simulates a real-world environment. If no warmup is needed use org.cachebench.warmup.NoCacheWarmup
    -->
    <warmup warmupClass="org.cachebench.warmup.PutGetCacheWarmup">
      <param name="operationCount" value="50000"/>
    </warmup>

    <!-- The "name" attrib is just used for display in the reports. You can write your own custom testClass.
         weight is currently unused.
    -->
    <test name="Strings" testClass="org.cachebench.tests.simpletests.StringTest" weight="2.0" repeat="20">
      <param name="writePercentage" value="20"/>
    </test>
  </testcase>

  <!-- The CSV report generated can be plugged in to a spreadsheet to generate graphs. If 'outputFile is set to '-generic-'
       then the name would be generated as follows: 'data_<cache-product>.csv' -->
  <report outputFile="-generic-" generator="com.googlecode.concurrentlinkedhashmap.benchmark.CacheBenchmark$CustomCsvStatisticReportGenerator"/>

</cachebench>
